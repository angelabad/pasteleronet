
<p>
Artículo traducido de: <a
href="http://www.debian-administration.org/articles/526">http://www.debian-administration.org/articles/526</a> 
</p>

<p>
Puppet es un sistema relativamente nuevo para la configuración y el
mantenimiento de grandes redes de maquinas. Es similar a CFEngine,
pero escrito en Ruby. En esta introduccion al trabajo con Puppet
veremos como instalarlo, y ponerlo a funcionar en una pequeña LAN.
</p>

<!--break-->

<p>
En este artículo veremos la instalción del servidor central puppet
sobre un ordenador así como la configuración de algunos nodos que
serán controlados a través de él. Para referenciar a las máquinas las
veremos de la siguiente manera:
</p>

<ul>
	<li><strong>vain.my.flat</strong>: Este es el servidor Puppet responsable de la configuración de cada una de las otras máquinas.</li>
	<li><strong>yours.my.flat</strong>: Un cliente simple.</li>
	<li><strong>etch-builder.my.flat</strong>: Un cliente simple.</li>
</ul>

<p>
<strong>Nota</strong>: Para que el cliente y el servidor puppet puedan
comunicarse asegurese que el puerto 8140 está abierto entre los dos
sistemas. Si está usando un firewall le recomiendo que el cliente sólo
acepte conexiones desde el servidor a través de este puerto.
</p>

<h3>Instalación del servidor</h3>

<p>
La instalación del servidor es tan simple como:
</p>

<pre>
root@vain:~# apt-get install puppetmaster
</pre>

<p>
Esto instalará el servidor, pero fallará al iniciarse porque no
tenemos el manifest instalado. Esto no es importante de momento.
</p>

<p>
Cuando queramos usar el servidor realmente, querremos que:
</p>

<ul>
	<li>Sirva ficheros que puedan ser copiados en los clientes.</li>
	<li>Tener una lista de acciones y clientes en donde aplicarlas.</li>
</ul>

<p>
Por defecto el servidor de ficheros está desactivado, asi que
necesitamos arreglar esto actualizando el fichero
<em>/etc/puppet/fileserver.conf</em>. En mi caso quiero servir
ficheros a la red 192.168.1.x, así que actualizaré este fichero para
que contenga:
</p>

<pre>
[files]
  path /etc/puppet/files
  allow 192.168.1.0/24
</pre>

<p>
Esto significa que cualquier ordenador de la red 192.168.1.0/24 puede
pedir ficheros situados en /etc/puppet/files en el servidor.
</p>

<p>
El siguiente paso es crear el esqueleto del fichero manifest:
</p>

<pre>
root@vain:~# mkdir -p /etc/puppet/manifests/
</pre>

<p>
El fichero que busca puppet es site.pp, así que crearemos el fichero
con el siguiente contenido:
</p>

<pre>
# fixup permissions on sudo
class sudo {
    file { "/etc/sudoers":
        owner =&gt; root,
        group =&gt; root,
        mode =&gt; 440,
    }
}

node default {
     include sudo
}
</pre>

<p>
(Volveremos a este archivo en la segunda parte de nuestro artículo,
donde explicaremos como controlar tus clientes usando puppet. Por el
momento sólo nos aseguraremos de que el fichero
<em>/etc/puppet/manifests/site.pp</em> es correcto y de que
/etc/sudoers existe con los permisos correctos.)
</p>

<h3>Instalación del cliente</h3>

<p>
El siguiente trabajo es instalar el cliente puppet en cada ordenador
que quieres que sea controlado. Para instalarlo ejecuta:
</p>

<pre>
root@vain:~# apt-get install puppet
</pre>

<p>
Una vez se haya instalado necesitarás configurar el cliente con el
nombre de tu servidor maestro. Por defecto el cliente intentará buscar
el nombre de host puppet y conectarse a él.
</p>

<p>
En mi caso controlo el DNS así que sólo debo poner el nombre
puppet.my.flat como alias al servidor real vain.my.flat, pero
explicaré como cambiar el nombre manualmente.
</p>

<p>
Actualiza el fichero <em>/etc/puppet/puppetd.conf</em> para que quede
similar a lo siguiente:
</p>

<pre>
[puppetd]
server = vain.my.flat
logdir = /var/log/puppet
vardir = /var/lib/puppet
rundir = /var/run
</pre>

<p>
Una vez esté esto cambiado debes reiniciar el cliente:
</p>

<pre>
root@etch-builder:~# /etc/init.d/puppet restart
Restarting puppet configuration management tool.
root@etch-builder:~#
</pre>

<h3>Intercambio de claves</h3>

<p>
El sistema puppet utiliza una pequeña autoridad certificadora para
proteger la comunicación en la red y el control de acceso al
servidor.
</p>

<p>
De momento sólo hemos instalado un servidor con un archivo manifest
simple y un cliente que conoce el nombre del servidor. Así que todavía
no hemos configurado la autentificación.
</p>

<p>
Tenemos un servidor escuchando a la espera de conexiones y un cliente
que sabe donde pedir acciones. Pero nada pasrá porque el cliente no
está autorizado a contactar con el servidor.
</p>

<p>
Vamos a arreglar esto.
</p>

<p>
En el servidor ejecutaremos el siguiente comando para ver que
peticiones han sido recibidas y no son autorizadas:
</p>

<pre>
root@vain:~# puppetca  --list
yours.my.flat
etch-builder.my.flat
</pre>

<p>
Para autorizar estas peticiones deberemos ejecutar:
</p>

<pre>
root@vain:~# puppetca  --sign yours.my.flat
Signed yours.my.flat
root@vain:~# puppetca  --sign etch-builder.my.flat
Signed etch-builder.my.flat
</pre>

<p>
Ahora todo está atado. El servidor aceptará conexiones de nuestros dos
nodos, y estos se podrán conectar y ejecutar el contenido del fichero
<em>site.pp</em>. Si este fichero cambia en el servidor los clientes
serán notificados cada 30 minutos y se actualizarán.
</p>

<p>
Esto acaba con el proceso de instalación y configuración del servidor
y cliente puppet. En el siguiente artículo explicaremos lo siguiente:
</p>

<ul>
	<li> Hacer puppet mas parecido a CFEngine.</li>
	<li> Empezar a usar puppet para controlar tus clientes de una forma útil.</li>
</ul>